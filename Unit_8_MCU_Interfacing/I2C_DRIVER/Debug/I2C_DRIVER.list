
I2C_DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b78  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000ca8  08000ca8  00010ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cc8  08000cc8  00010cd0  2**0
                  CONTENTS
  4 .ARM          00000000  08000cc8  08000cc8  00010cd0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cc8  08000cd0  00010cd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cc8  08000cc8  00010cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ccc  08000ccc  00010ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010cd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000cd0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000cd0  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010cd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004143  00000000  00000000  00010cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000099c  00000000  00000000  00014e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a46  00000000  00000000  000157d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a8  00000000  00000000  00016220  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000150  00000000  00000000  000163c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002698  00000000  00000000  00016518  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002062  00000000  00000000  00018bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009d06  00000000  00000000  0001ac12  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00024918  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000538  00000000  00000000  00024994  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c90 	.word	0x08000c90

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000c90 	.word	0x08000c90

08000170 <EEPROM_Init>:
 *      Author: Mostafa Elshiekh
 */

#include "I2C_SLAVE_EEPROM.h"
void EEPROM_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0
	//PB6 : I2C1_SCL
	//PB7 : I2C1_I2C1_SDA
	I2C_Config_t I2C1CFG;

	//I2C controller act as master
	I2C1CFG.I2C_ACK_Control = I2C_ACK_Contro_Enable;
 8000176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017a:	617b      	str	r3, [r7, #20]
	I2C1CFG.I2C_CLOCK_SPEED = I2C_CLOCK_SPEED_SM_100K;
 800017c:	4b09      	ldr	r3, [pc, #36]	; (80001a4 <EEPROM_Init+0x34>)
 800017e:	603b      	str	r3, [r7, #0]
	I2C1CFG.I2C_Mode = I2C_Mode_I2C;
 8000180:	2300      	movs	r3, #0
 8000182:	60bb      	str	r3, [r7, #8]
	I2C1CFG.P_Slave_Event_CallBack = NULL;
 8000184:	2300      	movs	r3, #0
 8000186:	61fb      	str	r3, [r7, #28]
	//I2C1CFG._I2C_General_Call = I2C_General_Call_Enable;
	I2C1CFG.Stretching = Stretching_Enable;
 8000188:	2300      	movs	r3, #0
 800018a:	607b      	str	r3, [r7, #4]

	MCAL_I2C_Set_GPIO_Pins(I2C1);
 800018c:	4806      	ldr	r0, [pc, #24]	; (80001a8 <EEPROM_Init+0x38>)
 800018e:	f000 f99f 	bl	80004d0 <MCAL_I2C_Set_GPIO_Pins>
	MCAL_I2C_Init(I2C1, &I2C1CFG);
 8000192:	463b      	mov	r3, r7
 8000194:	4619      	mov	r1, r3
 8000196:	4804      	ldr	r0, [pc, #16]	; (80001a8 <EEPROM_Init+0x38>)
 8000198:	f000 f886 	bl	80002a8 <MCAL_I2C_Init>
}
 800019c:	bf00      	nop
 800019e:	3720      	adds	r7, #32
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	000186a0 	.word	0x000186a0
 80001a8:	40005400 	.word	0x40005400

080001ac <EEPROM_Write_NBytes>:


unsigned char EEPROM_Write_NBytes(unsigned int Memory_Address , unsigned char *Bytes , uint8_t Data_Lenght)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b0c8      	sub	sp, #288	; 0x120
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	f107 030c 	add.w	r3, r7, #12
 80001b6:	6018      	str	r0, [r3, #0]
 80001b8:	f107 0308 	add.w	r3, r7, #8
 80001bc:	6019      	str	r1, [r3, #0]
 80001be:	1dfb      	adds	r3, r7, #7
 80001c0:	701a      	strb	r2, [r3, #0]
	uint8_t i=0;
 80001c2:	2300      	movs	r3, #0
 80001c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint8_t buffer[256];
	buffer[0] = (uint8_t)(Memory_Address>>8); //upper byte memory address
 80001c8:	f107 030c 	add.w	r3, r7, #12
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	0a1b      	lsrs	r3, r3, #8
 80001d0:	b2da      	uxtb	r2, r3
 80001d2:	f107 0314 	add.w	r3, r7, #20
 80001d6:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)(Memory_Address); //lower byte memory address
 80001d8:	f107 030c 	add.w	r3, r7, #12
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	b2da      	uxtb	r2, r3
 80001e0:	f107 0314 	add.w	r3, r7, #20
 80001e4:	705a      	strb	r2, [r3, #1]

	for(i=2 ; i<(Data_Lenght+2) ; i++)
 80001e6:	2302      	movs	r3, #2
 80001e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80001ec:	e011      	b.n	8000212 <EEPROM_Write_NBytes+0x66>
	{
		buffer[i] = Bytes[i-2];
 80001ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80001f2:	3b02      	subs	r3, #2
 80001f4:	f107 0208 	add.w	r2, r7, #8
 80001f8:	6812      	ldr	r2, [r2, #0]
 80001fa:	441a      	add	r2, r3
 80001fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000200:	7811      	ldrb	r1, [r2, #0]
 8000202:	f107 0214 	add.w	r2, r7, #20
 8000206:	54d1      	strb	r1, [r2, r3]
	for(i=2 ; i<(Data_Lenght+2) ; i++)
 8000208:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800020c:	3301      	adds	r3, #1
 800020e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000212:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8000216:	1dfb      	adds	r3, r7, #7
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	3302      	adds	r3, #2
 800021c:	429a      	cmp	r2, r3
 800021e:	dbe6      	blt.n	80001ee <EEPROM_Write_NBytes+0x42>
	}

	MCAL_I2C_Master_TX(I2C1, EEPROM_SLAVE_ADDRESS , buffer , (Data_Lenght+2), With_Stop, Start);
 8000220:	1dfb      	adds	r3, r7, #7
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	3302      	adds	r3, #2
 8000226:	4619      	mov	r1, r3
 8000228:	f107 0214 	add.w	r2, r7, #20
 800022c:	2300      	movs	r3, #0
 800022e:	9301      	str	r3, [sp, #4]
 8000230:	2300      	movs	r3, #0
 8000232:	9300      	str	r3, [sp, #0]
 8000234:	460b      	mov	r3, r1
 8000236:	212a      	movs	r1, #42	; 0x2a
 8000238:	4804      	ldr	r0, [pc, #16]	; (800024c <EEPROM_Write_NBytes+0xa0>)
 800023a:	f000 f993 	bl	8000564 <MCAL_I2C_Master_TX>
	return 0;
 800023e:	2300      	movs	r3, #0
}
 8000240:	4618      	mov	r0, r3
 8000242:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40005400 	.word	0x40005400

08000250 <EEPROM_Read_Byte>:


uint8_t   EEPROM_Read_Byte(unsigned int Memory_Address , uint8_t* DataOut , uint8_t Data_Lenght)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af02      	add	r7, sp, #8
 8000256:	60f8      	str	r0, [r7, #12]
 8000258:	60b9      	str	r1, [r7, #8]
 800025a:	4613      	mov	r3, r2
 800025c:	71fb      	strb	r3, [r7, #7]

	uint8_t  buffer[2];
	buffer[0] = (uint8_t)(Memory_Address>>8); //upper byte memory address
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	b2db      	uxtb	r3, r3
 8000264:	753b      	strb	r3, [r7, #20]
	buffer[1] = (uint8_t)(Memory_Address); //lower byte memory address
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	b2db      	uxtb	r3, r3
 800026a:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_Master_TX(I2C1, EEPROM_SLAVE_ADDRESS , &buffer , 2, Without_Stop, Start); //write address only
 800026c:	f107 0214 	add.w	r2, r7, #20
 8000270:	2300      	movs	r3, #0
 8000272:	9301      	str	r3, [sp, #4]
 8000274:	2301      	movs	r3, #1
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	2302      	movs	r3, #2
 800027a:	212a      	movs	r1, #42	; 0x2a
 800027c:	4809      	ldr	r0, [pc, #36]	; (80002a4 <EEPROM_Read_Byte+0x54>)
 800027e:	f000 f971 	bl	8000564 <MCAL_I2C_Master_TX>

	MCAL_I2C_Master_RX(I2C1, EEPROM_SLAVE_ADDRESS , DataOut , Data_Lenght, With_Stop, Reapeated_Start_En); //Read
 8000282:	79fa      	ldrb	r2, [r7, #7]
 8000284:	2301      	movs	r3, #1
 8000286:	9301      	str	r3, [sp, #4]
 8000288:	2300      	movs	r3, #0
 800028a:	9300      	str	r3, [sp, #0]
 800028c:	4613      	mov	r3, r2
 800028e:	68ba      	ldr	r2, [r7, #8]
 8000290:	212a      	movs	r1, #42	; 0x2a
 8000292:	4804      	ldr	r0, [pc, #16]	; (80002a4 <EEPROM_Read_Byte+0x54>)
 8000294:	f000 fac4 	bl	8000820 <MCAL_I2C_Master_RX>

	return 0;
 8000298:	2300      	movs	r3, #0



}
 800029a:	4618      	mov	r0, r3
 800029c:	3718      	adds	r7, #24
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40005400 	.word	0x40005400

080002a8 <MCAL_I2C_Init>:
 * note -                   -None
 */
/**================================================================= */

void MCAL_I2C_Init(I2C_TypeDef *I2Cx , I2C_Config_t *I2C_config)
{
 80002a8:	b5b0      	push	{r4, r5, r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	6039      	str	r1, [r7, #0]
	uint16_t TmReg=0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	82fb      	strh	r3, [r7, #22]
	uint32_t Frequancy;
	uint32_t pclk1 = 8000000;
 80002b6:	4b7c      	ldr	r3, [pc, #496]	; (80004a8 <MCAL_I2C_Init+0x200>)
 80002b8:	613b      	str	r3, [r7, #16]
	uint32_t Result=0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]

	//Enable RCC Clock
	if( I2Cx == I2C1 )
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4a7a      	ldr	r2, [pc, #488]	; (80004ac <MCAL_I2C_Init+0x204>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d110      	bne.n	80002e8 <MCAL_I2C_Init+0x40>
	{
		Global_I2C_Config[I2C1_INDEX]=*I2C_config;
 80002c6:	4a7a      	ldr	r2, [pc, #488]	; (80004b0 <MCAL_I2C_Init+0x208>)
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	4614      	mov	r4, r2
 80002cc:	461d      	mov	r5, r3
 80002ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80002d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC_I2C1_CLOCK_EN();
 80002da:	4b76      	ldr	r3, [pc, #472]	; (80004b4 <MCAL_I2C_Init+0x20c>)
 80002dc:	69db      	ldr	r3, [r3, #28]
 80002de:	4a75      	ldr	r2, [pc, #468]	; (80004b4 <MCAL_I2C_Init+0x20c>)
 80002e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002e4:	61d3      	str	r3, [r2, #28]
 80002e6:	e010      	b.n	800030a <MCAL_I2C_Init+0x62>
	}
	else
	{
		Global_I2C_Config[I2C2_INDEX]=*I2C_config;
 80002e8:	4b71      	ldr	r3, [pc, #452]	; (80004b0 <MCAL_I2C_Init+0x208>)
 80002ea:	683a      	ldr	r2, [r7, #0]
 80002ec:	f103 0420 	add.w	r4, r3, #32
 80002f0:	4615      	mov	r5, r2
 80002f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80002fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC_I2C2_CLOCK_EN();
 80002fe:	4b6d      	ldr	r3, [pc, #436]	; (80004b4 <MCAL_I2C_Init+0x20c>)
 8000300:	69db      	ldr	r3, [r3, #28]
 8000302:	4a6c      	ldr	r2, [pc, #432]	; (80004b4 <MCAL_I2C_Init+0x20c>)
 8000304:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000308:	61d3      	str	r3, [r2, #28]
	}

	if(I2C_config->I2C_Mode == I2C_Mode_I2C)
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	2b00      	cmp	r3, #0
 8000310:	f040 8083 	bne.w	800041a <MCAL_I2C_Init+0x172>
	{

		/**************************** INIT Timing *********************************/
		//I2C_CR2.FREQ[5:0]: peripheral clock frequancy
		/*Get the I2Cx->CR2 val*/
		TmReg = I2Cx->I2C_CR2;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	82fb      	strh	r3, [r7, #22]
		//Clear frequancy FREQ[5:0] bits
		TmReg &=~(I2C_CR2_FREQ); //Clear the first 6bits in CR2 register(FREQ[5:0]
 800031a:	8afb      	ldrh	r3, [r7, #22]
 800031c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000320:	82fb      	strh	r3, [r7, #22]
		/*Get pclk1 frequancy val*/
		pclk1 = MCAL_RCC_Get_PCLK1_Freq();
 8000322:	f000 fc17 	bl	8000b54 <MCAL_RCC_Get_PCLK1_Freq>
 8000326:	6138      	str	r0, [r7, #16]
		the maximum frequency is limited by the maximum APB frequency and cannot exceed
		50 MHz (peripheral intrinsic maximum limit).
		0b000000: Not allowed
		0b000001: Not allowed
		0b000010: 2 MHz*/
		Frequancy = (uint16_t) (pclk1 / 1000000);
 8000328:	693b      	ldr	r3, [r7, #16]
 800032a:	4a63      	ldr	r2, [pc, #396]	; (80004b8 <MCAL_I2C_Init+0x210>)
 800032c:	fba2 2303 	umull	r2, r3, r2, r3
 8000330:	0c9b      	lsrs	r3, r3, #18
 8000332:	b29b      	uxth	r3, r3
 8000334:	60bb      	str	r3, [r7, #8]

		TmReg |=Frequancy;
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	b29a      	uxth	r2, r3
 800033a:	8afb      	ldrh	r3, [r7, #22]
 800033c:	4313      	orrs	r3, r2
 800033e:	82fb      	strh	r3, [r7, #22]
		//Write to I2C_CR2
		I2Cx->I2C_CR2 = TmReg;
 8000340:	8afa      	ldrh	r2, [r7, #22]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	605a      	str	r2, [r3, #4]

		/*Configure the clock control registers*/
		//Disable I2C peripheral
		I2Cx->I2C_CR1 &=~(I2C_CR1_PE);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f023 0201 	bic.w	r2, r3, #1
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	601a      	str	r2, [r3, #0]

		TmReg = 0;
 8000352:	2300      	movs	r3, #0
 8000354:	82fb      	strh	r3, [r7, #22]

		//Set Mode (Stansard mode / Fast mode)
		if(I2C_config->I2C_CLOCK_SPEED == I2C_CLOCK_SPEED_SM_50K ||I2C_config->I2C_CLOCK_SPEED == I2C_CLOCK_SPEED_SM_100K )
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a58      	ldr	r2, [pc, #352]	; (80004bc <MCAL_I2C_Init+0x214>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d004      	beq.n	800036a <MCAL_I2C_Init+0xc2>
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a56      	ldr	r2, [pc, #344]	; (80004c0 <MCAL_I2C_Init+0x218>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d113      	bne.n	8000392 <MCAL_I2C_Init+0xea>
			//Standard Mode speed calculation
			/*Tclk/2 = CCR * Tpclk1
			 * CCR = Tclk /(Tpclk1 * 2)
			 * CCR = Fpclk1 /(I2C_ClockFrequancy * 2)
			 */
			Result = (uint16_t)(pclk1 /(I2C_config->I2C_CLOCK_SPEED *2 ));
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	693a      	ldr	r2, [r7, #16]
 8000372:	fbb2 f3f3 	udiv	r3, r2, r3
 8000376:	b29b      	uxth	r3, r3
 8000378:	60fb      	str	r3, [r7, #12]
			TmReg |=Result;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	b29a      	uxth	r2, r3
 800037e:	8afb      	ldrh	r3, [r7, #22]
 8000380:	4313      	orrs	r3, r2
 8000382:	82fb      	strh	r3, [r7, #22]
			//Write to I2C_CCR
			I2Cx->I2C_CCR = TmReg;
 8000384:	8afa      	ldrh	r2, [r7, #22]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	61da      	str	r2, [r3, #28]
			/*For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
			If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
			therefore the TRISE[5:0] bits must be programmed with 09h.
			(1000 ns / 125 ns = 8 + 1)*/

			I2Cx->I2C_TRISE = Frequancy +1;
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	1c5a      	adds	r2, r3, #1
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	621a      	str	r2, [r3, #32]
		{
			//Fast Mode ---Not Supported
		}

		/*Get the I2Cx CR1 val*/
		TmReg = I2Cx->I2C_CR1;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	82fb      	strh	r3, [r7, #22]
		TmReg |=(uint16_t)(I2C_config->I2C_ACK_Control)|(I2C_config->Stretching)|(I2C_config->_I2C_General_Call |I2C_config->I2C_Mode);
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	b29a      	uxth	r2, r3
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	685b      	ldr	r3, [r3, #4]
 80003a2:	b29b      	uxth	r3, r3
 80003a4:	4313      	orrs	r3, r2
 80003a6:	b29a      	uxth	r2, r3
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	b299      	uxth	r1, r3
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	b29b      	uxth	r3, r3
 80003b4:	430b      	orrs	r3, r1
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	4313      	orrs	r3, r2
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	8afb      	ldrh	r3, [r7, #22]
 80003be:	4313      	orrs	r3, r2
 80003c0:	82fb      	strh	r3, [r7, #22]
		//Write to I2C_CR1
		I2Cx->I2C_CR1 = TmReg;
 80003c2:	8afa      	ldrh	r2, [r7, #22]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	601a      	str	r2, [r3, #0]

		/**************************** I2CX OAR1 & OAR2 Configuration *********************************/
		TmReg=0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	82fb      	strh	r3, [r7, #22]
		if(I2C_config->I2C_Slave_Address.Enable_Dual_ADD == 1)
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	899b      	ldrh	r3, [r3, #12]
 80003d0:	2b01      	cmp	r3, #1
 80003d2:	d10f      	bne.n	80003f4 <MCAL_I2C_Init+0x14c>
		{
			TmReg |=(I2C_OAR2_ENDUAL); //Enable Dual Address
 80003d4:	8afb      	ldrh	r3, [r7, #22]
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	82fb      	strh	r3, [r7, #22]
			/*Set Secondary Address*/
			TmReg |=(I2C_config->I2C_Slave_Address.Secondary_Slave_Address<<1);//bits 7:1 of address in dual addressing mode
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	8a1b      	ldrh	r3, [r3, #16]
 80003e0:	005b      	lsls	r3, r3, #1
 80003e2:	b21a      	sxth	r2, r3
 80003e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80003e8:	4313      	orrs	r3, r2
 80003ea:	b21b      	sxth	r3, r3
 80003ec:	82fb      	strh	r3, [r7, #22]
			//Write to
			I2Cx->I2C_OAR2 = TmReg;
 80003ee:	8afa      	ldrh	r2, [r7, #22]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	60da      	str	r2, [r3, #12]
		}
		TmReg = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	82fb      	strh	r3, [r7, #22]
		TmReg |=(I2C_config->I2C_Slave_Address.Primary_Slave_Address<<1);
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	89db      	ldrh	r3, [r3, #14]
 80003fc:	005b      	lsls	r3, r3, #1
 80003fe:	b21a      	sxth	r2, r3
 8000400:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000404:	4313      	orrs	r3, r2
 8000406:	b21b      	sxth	r3, r3
 8000408:	82fb      	strh	r3, [r7, #22]
		TmReg |=(I2C_config->I2C_Slave_Address.I2C_Addressing_Slave_Mode);
 800040a:	683b      	ldr	r3, [r7, #0]
 800040c:	8a5a      	ldrh	r2, [r3, #18]
 800040e:	8afb      	ldrh	r3, [r7, #22]
 8000410:	4313      	orrs	r3, r2
 8000412:	82fb      	strh	r3, [r7, #22]
		//Write to I2C_OAR1
		I2Cx->I2C_OAR1 = TmReg;
 8000414:	8afa      	ldrh	r2, [r7, #22]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	609a      	str	r2, [r3, #8]
	{
		//SMBUS Not Supported
	}

	//Interrupt mode in slave mode
	if(I2C_config->P_Slave_Event_CallBack !=NULL)
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d038      	beq.n	8000494 <MCAL_I2C_Init+0x1ec>
	{
		//Slave Mode
		//Bit 10 ITBUFEN: Buffer interrupt enable
		I2Cx->I2C_CR1 |=I2C_CR2_ITBUFEN;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	601a      	str	r2, [r3, #0]
		//Bit 8 ITERREN: Error interrupt enable
		I2Cx->I2C_CR1 |=I2C_CR2_ITERREN;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	601a      	str	r2, [r3, #0]
		//Bit 9 ITEVTEN: Event interrupt enable
		I2Cx->I2C_CR1 |=I2C_CR2_ITEVTEN;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	601a      	str	r2, [r3, #0]

		//Enable interrupt in NVIC
		if( I2Cx == I2C1 )
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a18      	ldr	r2, [pc, #96]	; (80004ac <MCAL_I2C_Init+0x204>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d10c      	bne.n	8000468 <MCAL_I2C_Init+0x1c0>
		{
			NVIC_IRQ31_I2C1_EV_IRQ_ENABLE();
 800044e:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <MCAL_I2C_Init+0x21c>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a1c      	ldr	r2, [pc, #112]	; (80004c4 <MCAL_I2C_Init+0x21c>)
 8000454:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000458:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_IRQ_ENABLE();
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <MCAL_I2C_Init+0x220>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a1a      	ldr	r2, [pc, #104]	; (80004c8 <MCAL_I2C_Init+0x220>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6013      	str	r3, [r2, #0]
 8000466:	e00f      	b.n	8000488 <MCAL_I2C_Init+0x1e0>
		}
		else if(I2Cx == I2C2)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4a18      	ldr	r2, [pc, #96]	; (80004cc <MCAL_I2C_Init+0x224>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d10b      	bne.n	8000488 <MCAL_I2C_Init+0x1e0>
		{
			NVIC_IRQ33_I2C2_EV_IRQ_ENABLE();
 8000470:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <MCAL_I2C_Init+0x220>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a14      	ldr	r2, [pc, #80]	; (80004c8 <MCAL_I2C_Init+0x220>)
 8000476:	f043 0302 	orr.w	r3, r3, #2
 800047a:	6013      	str	r3, [r2, #0]
			NVIC_IRQ34_I2C2_ER_IRQ_ENABLE();
 800047c:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <MCAL_I2C_Init+0x220>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a11      	ldr	r2, [pc, #68]	; (80004c8 <MCAL_I2C_Init+0x220>)
 8000482:	f043 0304 	orr.w	r3, r3, #4
 8000486:	6013      	str	r3, [r2, #0]
		}
		I2Cx->I2C_SR1 = 0;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2200      	movs	r2, #0
 800048c:	615a      	str	r2, [r3, #20]
		I2Cx->I2C_SR2 = 0;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	2200      	movs	r2, #0
 8000492:	619a      	str	r2, [r3, #24]
	}

	/*Enable I2C Peripheral Bit 0 PE: Peripheral enable*/
	I2Cx->I2C_CR1 |=I2C_CR1_PE;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f043 0201 	orr.w	r2, r3, #1
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	601a      	str	r2, [r3, #0]
}
 80004a0:	bf00      	nop
 80004a2:	3718      	adds	r7, #24
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bdb0      	pop	{r4, r5, r7, pc}
 80004a8:	007a1200 	.word	0x007a1200
 80004ac:	40005400 	.word	0x40005400
 80004b0:	2000001c 	.word	0x2000001c
 80004b4:	40021000 	.word	0x40021000
 80004b8:	431bde83 	.word	0x431bde83
 80004bc:	0007a120 	.word	0x0007a120
 80004c0:	000186a0 	.word	0x000186a0
 80004c4:	e000e100 	.word	0xe000e100
 80004c8:	e000e104 	.word	0xe000e104
 80004cc:	40005800 	.word	0x40005800

080004d0 <MCAL_I2C_Set_GPIO_Pins>:
 * @retval -                -None
 * note -                   -None
 */
/**================================================================= */
void MCAL_I2C_Set_GPIO_Pins(I2C_TypeDef *I2Cx)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Configure_t PinCfg;

	if( I2Cx == I2C1 )
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a1f      	ldr	r2, [pc, #124]	; (8000558 <MCAL_I2C_Set_GPIO_Pins+0x88>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d118      	bne.n	8000512 <MCAL_I2C_Set_GPIO_Pins+0x42>
	{
		//I2C1_SCL-->PB6
		PinCfg.GPIO_Pin_Number = GPIO_PIN_6;
 80004e0:	2340      	movs	r3, #64	; 0x40
 80004e2:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80004e4:	2307      	movs	r3, #7
 80004e6:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80004e8:	2301      	movs	r3, #1
 80004ea:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80004ec:	f107 030c 	add.w	r3, r7, #12
 80004f0:	4619      	mov	r1, r3
 80004f2:	481a      	ldr	r0, [pc, #104]	; (800055c <MCAL_I2C_Set_GPIO_Pins+0x8c>)
 80004f4:	f000 fa7f 	bl	80009f6 <MCAL_GPIO_Init>

		//I2C1_SDA-->PB7
		PinCfg.GPIO_Pin_Number = GPIO_PIN_7;
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80004fc:	2307      	movs	r3, #7
 80004fe:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000500:	2301      	movs	r3, #1
 8000502:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	4619      	mov	r1, r3
 800050a:	4814      	ldr	r0, [pc, #80]	; (800055c <MCAL_I2C_Set_GPIO_Pins+0x8c>)
 800050c:	f000 fa73 	bl	80009f6 <MCAL_GPIO_Init>
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
		MCAL_GPIO_Init(GPIOB, &PinCfg);
	}

}
 8000510:	e01d      	b.n	800054e <MCAL_I2C_Set_GPIO_Pins+0x7e>
	else if(I2Cx == I2C2)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4a12      	ldr	r2, [pc, #72]	; (8000560 <MCAL_I2C_Set_GPIO_Pins+0x90>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d119      	bne.n	800054e <MCAL_I2C_Set_GPIO_Pins+0x7e>
		PinCfg.GPIO_Pin_Number = GPIO_PIN_10;
 800051a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800051e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 8000520:	2307      	movs	r3, #7
 8000522:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000524:	2301      	movs	r3, #1
 8000526:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	4619      	mov	r1, r3
 800052e:	480b      	ldr	r0, [pc, #44]	; (800055c <MCAL_I2C_Set_GPIO_Pins+0x8c>)
 8000530:	f000 fa61 	bl	80009f6 <MCAL_GPIO_Init>
		PinCfg.GPIO_Pin_Number = GPIO_PIN_11;
 8000534:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000538:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 800053a:	2307      	movs	r3, #7
 800053c:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800053e:	2301      	movs	r3, #1
 8000540:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000542:	f107 030c 	add.w	r3, r7, #12
 8000546:	4619      	mov	r1, r3
 8000548:	4804      	ldr	r0, [pc, #16]	; (800055c <MCAL_I2C_Set_GPIO_Pins+0x8c>)
 800054a:	f000 fa54 	bl	80009f6 <MCAL_GPIO_Init>
}
 800054e:	bf00      	nop
 8000550:	3710      	adds	r7, #16
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40005400 	.word	0x40005400
 800055c:	40010c00 	.word	0x40010c00
 8000560:	40005800 	.word	0x40005800

08000564 <MCAL_I2C_Master_TX>:

void MCAL_I2C_Master_TX(I2C_TypeDef *I2Cx ,uint16_t DevAddr , uint8_t* DataOut , uint32_t DataLen , Stop_Condition Stop,Reapeated_Start Start)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	607a      	str	r2, [r7, #4]
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	460b      	mov	r3, r1
 8000572:	817b      	strh	r3, [r7, #10]
	int i=0;
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]
	//To do
	//Support timeout (configure timer working for specic duaration rise interrupt
	//in ISR rise flag=1 and any code exist in while (check flag || Any polling condion)
	//1. Set the start bit in the I2C_CR1 register to generate a Sart Condition
	I2C_Generate_Start(I2Cx , Enable, Start);
 8000578:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800057c:	461a      	mov	r2, r3
 800057e:	2101      	movs	r1, #1
 8000580:	68f8      	ldr	r0, [r7, #12]
 8000582:	f000 f853 	bl	800062c <I2C_Generate_Start>

	//2. Wait for Ev5
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while(! I2C_Get_Flag_Status(I2Cx , EV5));
 8000586:	bf00      	nop
 8000588:	2101      	movs	r1, #1
 800058a:	68f8      	ldr	r0, [r7, #12]
 800058c:	f000 f8b0 	bl	80006f0 <I2C_Get_Flag_Status>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f8      	beq.n	8000588 <MCAL_I2C_Master_TX+0x24>

	//3. Send address
	I2C_Send_Address(I2Cx , DevAddr , I2C_Direction_Transmitter);
 8000596:	897b      	ldrh	r3, [r7, #10]
 8000598:	2200      	movs	r2, #0
 800059a:	4619      	mov	r1, r3
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f000 f86c 	bl	800067a <I2C_Send_Address>

	//4.Wait for Ev6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2
	while(! I2C_Get_Flag_Status(I2Cx , EV6));
 80005a2:	bf00      	nop
 80005a4:	2102      	movs	r1, #2
 80005a6:	68f8      	ldr	r0, [r7, #12]
 80005a8:	f000 f8a2 	bl	80006f0 <I2C_Get_Flag_Status>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f8      	beq.n	80005a4 <MCAL_I2C_Master_TX+0x40>

	//5. /*TRA , BUSY , TXE , MSL , TXE flage*/
	while(! I2C_Get_Flag_Status(I2Cx , MASTER_BYTE_TRANSMITTING));
 80005b2:	bf00      	nop
 80005b4:	491c      	ldr	r1, [pc, #112]	; (8000628 <MCAL_I2C_Master_TX+0xc4>)
 80005b6:	68f8      	ldr	r0, [r7, #12]
 80005b8:	f000 f89a 	bl	80006f0 <I2C_Get_Flag_Status>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0f8      	beq.n	80005b4 <MCAL_I2C_Master_TX+0x50>

	//6. Send Data
	for(i=0;i<DataLen;i++)
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	e019      	b.n	80005fc <MCAL_I2C_Master_TX+0x98>
	{
		//6.EV8_1: TxE=1, shift register empty, data register empty, write Data1 in DR.
		while(!I2C_Get_Flag_Status(I2Cx, EV8_1));
 80005c8:	bf00      	nop
 80005ca:	2104      	movs	r1, #4
 80005cc:	68f8      	ldr	r0, [r7, #12]
 80005ce:	f000 f88f 	bl	80006f0 <I2C_Get_Flag_Status>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d0f8      	beq.n	80005ca <MCAL_I2C_Master_TX+0x66>
		I2Cx->I2C_DR = DataOut[i];
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	461a      	mov	r2, r3
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	611a      	str	r2, [r3, #16]
		//Wait EV8
		//EV8: TxE=1, shift register not empty, d . ata register empty, cleared by writing DR register
		while(! I2C_Get_Flag_Status(I2Cx , EV8));
 80005e6:	bf00      	nop
 80005e8:	2103      	movs	r1, #3
 80005ea:	68f8      	ldr	r0, [r7, #12]
 80005ec:	f000 f880 	bl	80006f0 <I2C_Get_Flag_Status>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0f8      	beq.n	80005e8 <MCAL_I2C_Master_TX+0x84>
	for(i=0;i<DataLen;i++)
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	3301      	adds	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	429a      	cmp	r2, r3
 8000602:	d8e1      	bhi.n	80005c8 <MCAL_I2C_Master_TX+0x64>
	}


	if(Stop == With_Stop)
 8000604:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d104      	bne.n	8000616 <MCAL_I2C_Master_TX+0xb2>
	{
		//7. Send stop condition
		I2C_Generate_STOP(I2Cx , Enable);
 800060c:	2101      	movs	r1, #1
 800060e:	68f8      	ldr	r0, [r7, #12]
 8000610:	f000 f852 	bl	80006b8 <I2C_Generate_STOP>
	}
	else
	{
		I2C_Generate_STOP(I2Cx, Disable);
	}
}
 8000614:	e003      	b.n	800061e <MCAL_I2C_Master_TX+0xba>
		I2C_Generate_STOP(I2Cx, Disable);
 8000616:	2100      	movs	r1, #0
 8000618:	68f8      	ldr	r0, [r7, #12]
 800061a:	f000 f84d 	bl	80006b8 <I2C_Generate_STOP>
}
 800061e:	bf00      	nop
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	00070080 	.word	0x00070080

0800062c <I2C_Generate_Start>:

void I2C_Generate_Start(I2C_TypeDef *I2Cx , Functional_State NewState ,Reapeated_Start state )
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	70fb      	strb	r3, [r7, #3]
 8000638:	4613      	mov	r3, r2
 800063a:	70bb      	strb	r3, [r7, #2]

	if ( state != Reapeated_Start_En)
 800063c:	78bb      	ldrb	r3, [r7, #2]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d007      	beq.n	8000652 <I2C_Generate_Start+0x26>
	{
		//Check if the bus is idle
		while(I2C_Get_Flag_Status(I2Cx , I2C_FLAG_BUSY));//While Bus is Busy Stuck
 8000642:	bf00      	nop
 8000644:	2100      	movs	r1, #0
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f000 f852 	bl	80006f0 <I2C_Get_Flag_Status>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d1f8      	bne.n	8000644 <I2C_Generate_Start+0x18>
	0: No Start generation
	1: Repeated start generation
	In Slave mode:
	0: No Start generation
	1: Start generation when the bus is free*/
	if(NewState != Disable)
 8000652:	78fb      	ldrb	r3, [r7, #3]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d006      	beq.n	8000666 <I2C_Generate_Start+0x3a>
	{
		I2Cx->I2C_CR1 |=(I2C_CR1_START); //Enable stat generation
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	601a      	str	r2, [r3, #0]
	else
	{
		I2Cx->I2C_CR1 &=~(I2C_CR1_START);//Disable start generation
	}

}
 8000664:	e005      	b.n	8000672 <I2C_Generate_Start+0x46>
		I2Cx->I2C_CR1 &=~(I2C_CR1_START);//Disable start generation
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	601a      	str	r2, [r3, #0]
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <I2C_Send_Address>:

//supported only 7bit mode
void I2C_Send_Address(I2C_TypeDef *I2Cx , uint16_t Address ,I2C_Direction Direction )
{
 800067a:	b480      	push	{r7}
 800067c:	b083      	sub	sp, #12
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
 8000682:	460b      	mov	r3, r1
 8000684:	807b      	strh	r3, [r7, #2]
 8000686:	4613      	mov	r3, r2
 8000688:	707b      	strb	r3, [r7, #1]
	Address = (Address<<1); //7 Bit
 800068a:	887b      	ldrh	r3, [r7, #2]
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	807b      	strh	r3, [r7, #2]

	if(Direction != I2C_Direction_Transmitter)
 8000690:	787b      	ldrb	r3, [r7, #1]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d004      	beq.n	80006a0 <I2C_Send_Address+0x26>
	{
		//Set the address bin0 for read
		Address |=(1<<0);
 8000696:	887b      	ldrh	r3, [r7, #2]
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	807b      	strh	r3, [r7, #2]
 800069e:	e003      	b.n	80006a8 <I2C_Send_Address+0x2e>
	}
	else
	{
		//Reset the address bin0 for write
		Address &=~(1<<0);
 80006a0:	887b      	ldrh	r3, [r7, #2]
 80006a2:	f023 0301 	bic.w	r3, r3, #1
 80006a6:	807b      	strh	r3, [r7, #2]
	}

	/*Send the address */
	I2Cx->I2C_DR = Address;
 80006a8:	887a      	ldrh	r2, [r7, #2]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	611a      	str	r2, [r3, #16]
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr

080006b8 <I2C_Generate_STOP>:

void I2C_Generate_STOP(I2C_TypeDef *I2Cx  , Functional_State NewState)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]

	if(NewState != Disable)
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d006      	beq.n	80006d8 <I2C_Generate_STOP+0x20>
		The bit is set and cleared by software, cleared by hardware when a Stop condition is
		detected, set by hardware when a timeout error is detected.
		In Master Mode:
		0: No Stop generation.
		1: Stop generation after the current byte transfer or after the current Start condition is sent*/
		I2Cx->I2C_CR1 |=I2C_CR1_STOP;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	601a      	str	r2, [r3, #0]
	else
	{
		/*disable stop condition generate*/
		I2Cx->I2C_CR1 &=~I2C_CR1_STOP;
	}
}
 80006d6:	e005      	b.n	80006e4 <I2C_Generate_STOP+0x2c>
		I2Cx->I2C_CR1 &=~I2C_CR1_STOP;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	601a      	str	r2, [r3, #0]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
	...

080006f0 <I2C_Get_Flag_Status>:

Flag_Status I2C_Get_Flag_Status(I2C_TypeDef *I2Cx , Status Flag)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b087      	sub	sp, #28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
	//volatile uint32_t DumyRead;
	Flag_Status BitStatus = Reset;
 80006fa:	2300      	movs	r3, #0
 80006fc:	75fb      	strb	r3, [r7, #23]
	uint32_t flag1=0 , flag2=0;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
	uint32_t LastEvent=0;
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]


	switch (Flag)
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	2b04      	cmp	r3, #4
 800070e:	d806      	bhi.n	800071e <I2C_Get_Flag_Status+0x2e>
 8000710:	2b03      	cmp	r3, #3
 8000712:	d249      	bcs.n	80007a8 <I2C_Get_Flag_Status+0xb8>
 8000714:	2b01      	cmp	r3, #1
 8000716:	d014      	beq.n	8000742 <I2C_Get_Flag_Status+0x52>
 8000718:	2b01      	cmp	r3, #1
 800071a:	d81e      	bhi.n	800075a <I2C_Get_Flag_Status+0x6a>
 800071c:	e005      	b.n	800072a <I2C_Get_Flag_Status+0x3a>
 800071e:	2b05      	cmp	r3, #5
 8000720:	d04e      	beq.n	80007c0 <I2C_Get_Flag_Status+0xd0>
 8000722:	4a30      	ldr	r2, [pc, #192]	; (80007e4 <I2C_Get_Flag_Status+0xf4>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d024      	beq.n	8000772 <I2C_Get_Flag_Status+0x82>
 8000728:	e055      	b.n	80007d6 <I2C_Get_Flag_Status+0xe6>
				– Set by hardware on detection of SDA or SCL low
				– cleared by hardware on detection of a Stop condition.
				It indicates a communication in progress on the bus. This information is still updated when
				the interface is disabled (PE=0).*/

		if(I2Cx->I2C_SR2 & I2C_SR2_BUSY)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	2b00      	cmp	r3, #0
 8000734:	d002      	beq.n	800073c <I2C_Get_Flag_Status+0x4c>
		{
			BitStatus = Set;
 8000736:	2301      	movs	r3, #1
 8000738:	75fb      	strb	r3, [r7, #23]
		}
		else
		{
			BitStatus = Reset;
		}
		break ;
 800073a:	e04c      	b.n	80007d6 <I2C_Get_Flag_Status+0xe6>
			BitStatus = Reset;
 800073c:	2300      	movs	r3, #0
 800073e:	75fb      	strb	r3, [r7, #23]
		break ;
 8000740:	e049      	b.n	80007d6 <I2C_Get_Flag_Status+0xe6>
			0: No Start condition
			1: Start condition generated.
			– Set when a Start condition generated.
			– Cleared by software by reading the SR1 register followed by writing the DR register, or by
			hardware when PE=0*/
		if( (I2Cx->I2C_SR1) & (I2C_SR1_SB) )
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	2b00      	cmp	r3, #0
 800074c:	d002      	beq.n	8000754 <I2C_Get_Flag_Status+0x64>
		{
			BitStatus = Set;
 800074e:	2301      	movs	r3, #1
 8000750:	75fb      	strb	r3, [r7, #23]
		}
		else
		{
			BitStatus = Reset;
		}
		break;
 8000752:	e040      	b.n	80007d6 <I2C_Get_Flag_Status+0xe6>
			BitStatus = Reset;
 8000754:	2300      	movs	r3, #0
 8000756:	75fb      	strb	r3, [r7, #23]
		break;
 8000758:	e03d      	b.n	80007d6 <I2C_Get_Flag_Status+0xe6>
				This bit is cleared by software reading SR1 register followed reading SR2, or by hardware
				when PE=0.
				Address matched (Slave)
				0: Address mismatched or not received.
				1: Received address matched.*/
		if( I2Cx->I2C_SR1 & I2C_SR1_ADDR)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	2b00      	cmp	r3, #0
 8000764:	d002      	beq.n	800076c <I2C_Get_Flag_Status+0x7c>
		{
			BitStatus = Set;
 8000766:	2301      	movs	r3, #1
 8000768:	75fb      	strb	r3, [r7, #23]
		{
			BitStatus = Reset;
		}
		/*//ADDR=1, cleared by reading SR1 register followed by reading SR2
		DumyRead = I2Cx->I2C_SR2;*/
		break;
 800076a:	e034      	b.n	80007d6 <I2C_Get_Flag_Status+0xe6>
			BitStatus = Reset;
 800076c:	2300      	movs	r3, #0
 800076e:	75fb      	strb	r3, [r7, #23]
		break;
 8000770:	e031      	b.n	80007d6 <I2C_Get_Flag_Status+0xe6>


	case MASTER_BYTE_TRANSMITTING:

		/*Read I2Cx status registers*/
		flag1 = I2Cx->I2C_SR1;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	613b      	str	r3, [r7, #16]
		flag2 = I2Cx->I2C_SR2;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	60fb      	str	r3, [r7, #12]
		flag2 = flag2<<16;
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	041b      	lsls	r3, r3, #16
 8000782:	60fb      	str	r3, [r7, #12]

		/* Get LastEvent value from I2C status register*/
		LastEvent = (flag1 | flag2) & ((uint32_t)0x00FFFFFF);
 8000784:	693a      	ldr	r2, [r7, #16]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	4313      	orrs	r3, r2
 800078a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800078e:	60bb      	str	r3, [r7, #8]
		/*Check whether the last event contains the I2C_EVENT */
		if( (LastEvent & Flag) == Flag )
 8000790:	68ba      	ldr	r2, [r7, #8]
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	4013      	ands	r3, r2
 8000796:	683a      	ldr	r2, [r7, #0]
 8000798:	429a      	cmp	r2, r3
 800079a:	d102      	bne.n	80007a2 <I2C_Get_Flag_Status+0xb2>
		{
			/*last event is equal ti I2C_EVENT*/
			BitStatus = Set;
 800079c:	2301      	movs	r3, #1
 800079e:	75fb      	strb	r3, [r7, #23]
		else
		{
			/*last event is not equal ti I2C_EVENT*/
			BitStatus = Reset;
		}
		break;
 80007a0:	e019      	b.n	80007d6 <I2C_Get_Flag_Status+0xe6>
			BitStatus = Reset;
 80007a2:	2300      	movs	r3, #0
 80007a4:	75fb      	strb	r3, [r7, #23]
		break;
 80007a6:	e016      	b.n	80007d6 <I2C_Get_Flag_Status+0xe6>
			0: Data register not empty
			1: Data register empty
			– Set when DR is empty in transmission. TxE is not set during address phase.
			– Cleared by software writing to the DR register or by hardware after a start or a stop condition
			or when PE=0.*/
		if(I2Cx->I2C_SR1 & I2C_SR1_TXE)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	695b      	ldr	r3, [r3, #20]
 80007ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d002      	beq.n	80007ba <I2C_Get_Flag_Status+0xca>
		{
			//Data register empty
			BitStatus = Set;
 80007b4:	2301      	movs	r3, #1
 80007b6:	75fb      	strb	r3, [r7, #23]
		else
		{
			//Data register not empty
			BitStatus = Reset;
		}
		break;
 80007b8:	e00d      	b.n	80007d6 <I2C_Get_Flag_Status+0xe6>
			BitStatus = Reset;
 80007ba:	2300      	movs	r3, #0
 80007bc:	75fb      	strb	r3, [r7, #23]
		break;
 80007be:	e00a      	b.n	80007d6 <I2C_Get_Flag_Status+0xe6>
	case EV7:

		/*Bit 6 RxNE: Data register not empty (receivers)
		0: Data register empty
		1: Data register not empty*/
		if(I2Cx->I2C_SR1 & I2C_SR1_RXNE)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	695b      	ldr	r3, [r3, #20]
 80007c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d002      	beq.n	80007d2 <I2C_Get_Flag_Status+0xe2>
		{
			BitStatus = Set;
 80007cc:	2301      	movs	r3, #1
 80007ce:	75fb      	strb	r3, [r7, #23]
 80007d0:	e001      	b.n	80007d6 <I2C_Get_Flag_Status+0xe6>
		}
		else
		{
			BitStatus = Reset;
 80007d2:	2300      	movs	r3, #0
 80007d4:	75fb      	strb	r3, [r7, #23]
		}


	}
	return BitStatus;
 80007d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	371c      	adds	r7, #28
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	00070080 	.word	0x00070080

080007e8 <I2C_AcknowledgeConfig>:

void I2C_AcknowledgeConfig(I2C_TypeDef *I2Cx  , Functional_State NewState)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	70fb      	strb	r3, [r7, #3]
	/*Bit 10 ACK: Acknowledge enable
	This bit is set and cleared by software and cleared by hardware when PE=0.
	0: No acknowledge returned
	1: Acknowledge returned after a byte is received (matched address or data)*/

	if(NewState == Enable)
 80007f4:	78fb      	ldrb	r3, [r7, #3]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d106      	bne.n	8000808 <I2C_AcknowledgeConfig+0x20>
	{
		I2Cx->I2C_CR1 |=(I2C_CR1_ACK);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	601a      	str	r2, [r3, #0]
	else
	{
		I2Cx->I2C_CR1 &=~(I2C_CR1_ACK);
	}

}
 8000806:	e005      	b.n	8000814 <I2C_AcknowledgeConfig+0x2c>
		I2Cx->I2C_CR1 &=~(I2C_CR1_ACK);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	601a      	str	r2, [r3, #0]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
	...

08000820 <MCAL_I2C_Master_RX>:


void MCAL_I2C_Master_RX(I2C_TypeDef *I2Cx ,uint16_t DevAddr , uint8_t* DataOut , uint32_t DataLen , Stop_Condition Stop,Reapeated_Start Start)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	607a      	str	r2, [r7, #4]
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	460b      	mov	r3, r1
 800082e:	817b      	strh	r3, [r7, #10]
	int i=0;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
	uint8_t indix = I2Cx == I2C1 ? I2C1_INDEX : I2C2_INDEX;
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4a30      	ldr	r2, [pc, #192]	; (80008f8 <MCAL_I2C_Master_RX+0xd8>)
 8000838:	4293      	cmp	r3, r2
 800083a:	bf14      	ite	ne
 800083c:	2301      	movne	r3, #1
 800083e:	2300      	moveq	r3, #0
 8000840:	b2db      	uxtb	r3, r3
 8000842:	74fb      	strb	r3, [r7, #19]

	I2C_Generate_Start(I2Cx , Enable, Start);
 8000844:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000848:	461a      	mov	r2, r3
 800084a:	2101      	movs	r1, #1
 800084c:	68f8      	ldr	r0, [r7, #12]
 800084e:	f7ff feed 	bl	800062c <I2C_Generate_Start>

	//2. Wait for Ev5
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while(! I2C_Get_Flag_Status(I2Cx , EV5));
 8000852:	bf00      	nop
 8000854:	2101      	movs	r1, #1
 8000856:	68f8      	ldr	r0, [r7, #12]
 8000858:	f7ff ff4a 	bl	80006f0 <I2C_Get_Flag_Status>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d0f8      	beq.n	8000854 <MCAL_I2C_Master_RX+0x34>

	//3. Send address
	I2C_Send_Address(I2Cx , DevAddr , I2C_Direction_Recieve);
 8000862:	897b      	ldrh	r3, [r7, #10]
 8000864:	2201      	movs	r2, #1
 8000866:	4619      	mov	r1, r3
 8000868:	68f8      	ldr	r0, [r7, #12]
 800086a:	f7ff ff06 	bl	800067a <I2C_Send_Address>

	//4.Wait for Ev6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2
	while(! I2C_Get_Flag_Status(I2Cx , EV6));
 800086e:	bf00      	nop
 8000870:	2102      	movs	r1, #2
 8000872:	68f8      	ldr	r0, [r7, #12]
 8000874:	f7ff ff3c 	bl	80006f0 <I2C_Get_Flag_Status>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d0f8      	beq.n	8000870 <MCAL_I2C_Master_RX+0x50>

	I2C_AcknowledgeConfig(I2Cx , Enable);
 800087e:	2101      	movs	r1, #1
 8000880:	68f8      	ldr	r0, [r7, #12]
 8000882:	f7ff ffb1 	bl	80007e8 <I2C_AcknowledgeConfig>



	if(DataLen)
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d01c      	beq.n	80008c6 <MCAL_I2C_Master_RX+0xa6>
	{
		//5.read data until len become zero
		for(i=DataLen ; i>1 ; i--)
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	e012      	b.n	80008b8 <MCAL_I2C_Master_RX+0x98>
		{
			//wait until RXNE BECOMES 1
			while(! I2C_Get_Flag_Status(I2Cx , EV7));
 8000892:	bf00      	nop
 8000894:	2105      	movs	r1, #5
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	f7ff ff2a 	bl	80006f0 <I2C_Get_Flag_Status>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d0f8      	beq.n	8000894 <MCAL_I2C_Master_RX+0x74>
			//read data from data register
			*DataOut = I2Cx->I2C_DR;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	691b      	ldr	r3, [r3, #16]
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	701a      	strb	r2, [r3, #0]
			//increment the buffer address
			DataOut++;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3301      	adds	r3, #1
 80008b0:	607b      	str	r3, [r7, #4]
		for(i=DataLen ; i>1 ; i--)
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	3b01      	subs	r3, #1
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	dce9      	bgt.n	8000892 <MCAL_I2C_Master_RX+0x72>
		}
		//6.send not Ack
		I2C_AcknowledgeConfig(I2Cx , Disable); //To not receive
 80008be:	2100      	movs	r1, #0
 80008c0:	68f8      	ldr	r0, [r7, #12]
 80008c2:	f7ff ff91 	bl	80007e8 <I2C_AcknowledgeConfig>
	}


	if(Stop == With_Stop)
 80008c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d103      	bne.n	80008d6 <MCAL_I2C_Master_RX+0xb6>
	{
		//7. Send stop condition
		I2C_Generate_STOP(I2Cx, Enable);
 80008ce:	2101      	movs	r1, #1
 80008d0:	68f8      	ldr	r0, [r7, #12]
 80008d2:	f7ff fef1 	bl	80006b8 <I2C_Generate_STOP>
	}

	//re-enable ack
	if(Global_I2C_Config[indix].I2C_ACK_Control == I2C_ACK_Contro_Enable)
 80008d6:	7cfb      	ldrb	r3, [r7, #19]
 80008d8:	4a08      	ldr	r2, [pc, #32]	; (80008fc <MCAL_I2C_Master_RX+0xdc>)
 80008da:	015b      	lsls	r3, r3, #5
 80008dc:	4413      	add	r3, r2
 80008de:	3314      	adds	r3, #20
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008e6:	d103      	bne.n	80008f0 <MCAL_I2C_Master_RX+0xd0>
	{
		I2C_AcknowledgeConfig(I2Cx , Enable);
 80008e8:	2101      	movs	r1, #1
 80008ea:	68f8      	ldr	r0, [r7, #12]
 80008ec:	f7ff ff7c 	bl	80007e8 <I2C_AcknowledgeConfig>
	}

}
 80008f0:	bf00      	nop
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40005400 	.word	0x40005400
 80008fc:	2000001c 	.word	0x2000001c

08000900 <I2C1_EV_IRQHandler>:
	return result;
}


void I2C1_EV_IRQHandler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <Get_CRLH_Postion>:

#include "STM32F103C6_GPIO_DRIVERS.h"


uint8_t Get_CRLH_Postion(uint16_t PinNumber)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800093a:	88fb      	ldrh	r3, [r7, #6]
 800093c:	2b80      	cmp	r3, #128	; 0x80
 800093e:	d042      	beq.n	80009c6 <Get_CRLH_Postion+0x96>
 8000940:	2b80      	cmp	r3, #128	; 0x80
 8000942:	dc11      	bgt.n	8000968 <Get_CRLH_Postion+0x38>
 8000944:	2b08      	cmp	r3, #8
 8000946:	d036      	beq.n	80009b6 <Get_CRLH_Postion+0x86>
 8000948:	2b08      	cmp	r3, #8
 800094a:	dc06      	bgt.n	800095a <Get_CRLH_Postion+0x2a>
 800094c:	2b02      	cmp	r3, #2
 800094e:	d02e      	beq.n	80009ae <Get_CRLH_Postion+0x7e>
 8000950:	2b04      	cmp	r3, #4
 8000952:	d02e      	beq.n	80009b2 <Get_CRLH_Postion+0x82>
 8000954:	2b01      	cmp	r3, #1
 8000956:	d028      	beq.n	80009aa <Get_CRLH_Postion+0x7a>
 8000958:	e047      	b.n	80009ea <Get_CRLH_Postion+0xba>
 800095a:	2b20      	cmp	r3, #32
 800095c:	d02f      	beq.n	80009be <Get_CRLH_Postion+0x8e>
 800095e:	2b40      	cmp	r3, #64	; 0x40
 8000960:	d02f      	beq.n	80009c2 <Get_CRLH_Postion+0x92>
 8000962:	2b10      	cmp	r3, #16
 8000964:	d029      	beq.n	80009ba <Get_CRLH_Postion+0x8a>
 8000966:	e040      	b.n	80009ea <Get_CRLH_Postion+0xba>
 8000968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800096c:	d033      	beq.n	80009d6 <Get_CRLH_Postion+0xa6>
 800096e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000972:	dc09      	bgt.n	8000988 <Get_CRLH_Postion+0x58>
 8000974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000978:	d029      	beq.n	80009ce <Get_CRLH_Postion+0x9e>
 800097a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800097e:	d028      	beq.n	80009d2 <Get_CRLH_Postion+0xa2>
 8000980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000984:	d021      	beq.n	80009ca <Get_CRLH_Postion+0x9a>
 8000986:	e030      	b.n	80009ea <Get_CRLH_Postion+0xba>
 8000988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800098c:	d027      	beq.n	80009de <Get_CRLH_Postion+0xae>
 800098e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000992:	dc03      	bgt.n	800099c <Get_CRLH_Postion+0x6c>
 8000994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000998:	d01f      	beq.n	80009da <Get_CRLH_Postion+0xaa>
 800099a:	e026      	b.n	80009ea <Get_CRLH_Postion+0xba>
 800099c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80009a0:	d01f      	beq.n	80009e2 <Get_CRLH_Postion+0xb2>
 80009a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009a6:	d01e      	beq.n	80009e6 <Get_CRLH_Postion+0xb6>
 80009a8:	e01f      	b.n	80009ea <Get_CRLH_Postion+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	e01e      	b.n	80009ec <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_1:
		return 4;
 80009ae:	2304      	movs	r3, #4
 80009b0:	e01c      	b.n	80009ec <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_2:
		return 8;
 80009b2:	2308      	movs	r3, #8
 80009b4:	e01a      	b.n	80009ec <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_3:
		return 12;
 80009b6:	230c      	movs	r3, #12
 80009b8:	e018      	b.n	80009ec <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_4:
		return 16;
 80009ba:	2310      	movs	r3, #16
 80009bc:	e016      	b.n	80009ec <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_5:
		return 20;
 80009be:	2314      	movs	r3, #20
 80009c0:	e014      	b.n	80009ec <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_6:
		return 24;
 80009c2:	2318      	movs	r3, #24
 80009c4:	e012      	b.n	80009ec <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_7:
		return 28;
 80009c6:	231c      	movs	r3, #28
 80009c8:	e010      	b.n	80009ec <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	e00e      	b.n	80009ec <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_9:
		return 4;
 80009ce:	2304      	movs	r3, #4
 80009d0:	e00c      	b.n	80009ec <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_10:
		return 8;
 80009d2:	2308      	movs	r3, #8
 80009d4:	e00a      	b.n	80009ec <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_11:
		return 12;
 80009d6:	230c      	movs	r3, #12
 80009d8:	e008      	b.n	80009ec <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_12:
		return 16;
 80009da:	2310      	movs	r3, #16
 80009dc:	e006      	b.n	80009ec <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_13:
		return 20;
 80009de:	2314      	movs	r3, #20
 80009e0:	e004      	b.n	80009ec <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_14:
		return 24;
 80009e2:	2318      	movs	r3, #24
 80009e4:	e002      	b.n	80009ec <Get_CRLH_Postion+0xbc>
		break;

	case GPIO_PIN_15:
		return 28;
 80009e6:	231c      	movs	r3, #28
 80009e8:	e000      	b.n	80009ec <Get_CRLH_Postion+0xbc>
		break;
	default:
		return 0;
 80009ea:	2300      	movs	r3, #0
		break;

	}
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr

080009f6 <MCAL_GPIO_Init>:
 * note -                   -stmf103c6 MCU has GPIO A,B,C,D,E Modules
 *                           but LQFP48 Package has only GPIO A,B, Part of C/D exported external pins
 */
/**================================================================= */
void MCAL_GPIO_Init( GPIO_TypeDef *GPIOx , GPIO_Pin_Configure_t *Pin_Config )
{
 80009f6:	b590      	push	{r4, r7, lr}
 80009f8:	b085      	sub	sp, #20
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]

	//To Init Any Pins Must Write On Port configuration register low (GPIOx_CRL) 0>>>7
	//Or register low (GPIOx_CRH) 8>>>15
	//We Determine The Position Should Write On It In  configuration register By Determine First Position Pin

	volatile uint32_t *ConfigureRegister = NULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
	uint8_t   ConfigurePin=0;     //In This Variable We Store The Configure Pin
 8000a04:	2300      	movs	r3, #0
 8000a06:	73fb      	strb	r3, [r7, #15]

	ConfigureRegister = (Pin_Config->GPIO_Pin_Number < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	2bff      	cmp	r3, #255	; 0xff
 8000a0e:	d801      	bhi.n	8000a14 <MCAL_GPIO_Init+0x1e>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	e001      	b.n	8000a18 <MCAL_GPIO_Init+0x22>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3304      	adds	r3, #4
 8000a18:	60bb      	str	r3, [r7, #8]
	//Clear CNF & MODE
	*(ConfigureRegister) &=~(0xf<<Get_CRLH_Postion(Pin_Config->GPIO_Pin_Number));
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ff86 	bl	8000930 <Get_CRLH_Postion>
 8000a24:	4603      	mov	r3, r0
 8000a26:	461a      	mov	r2, r3
 8000a28:	230f      	movs	r3, #15
 8000a2a:	4093      	lsls	r3, r2
 8000a2c:	43da      	mvns	r2, r3
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	401a      	ands	r2, r3
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	601a      	str	r2, [r3, #0]

	if (Pin_Config->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || Pin_Config->GPIO_MODE ==GPIO_MODE_OUTPUT_AF_PP || Pin_Config->GPIO_MODE ==GPIO_MODE_OUTPUT_OD || Pin_Config->GPIO_MODE ==GPIO_MODE_OUTPUT_PP)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	789b      	ldrb	r3, [r3, #2]
 8000a3c:	2b07      	cmp	r3, #7
 8000a3e:	d00b      	beq.n	8000a58 <MCAL_GPIO_Init+0x62>
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	789b      	ldrb	r3, [r3, #2]
 8000a44:	2b06      	cmp	r3, #6
 8000a46:	d007      	beq.n	8000a58 <MCAL_GPIO_Init+0x62>
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	789b      	ldrb	r3, [r3, #2]
 8000a4c:	2b05      	cmp	r3, #5
 8000a4e:	d003      	beq.n	8000a58 <MCAL_GPIO_Init+0x62>
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	789b      	ldrb	r3, [r3, #2]
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	d10e      	bne.n	8000a76 <MCAL_GPIO_Init+0x80>
	{

		//I sure The User Want Make The Pin As Output & in Case Output Should Configure Mode(Speed) & CNF(State)
		ConfigurePin = ((( (Pin_Config->GPIO_MODE - 4)<<2) |(Pin_Config->GPIO_OUTPUT_SPEED)) & 0x0f); //Shift 2 to Set The CNF Bits
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	789b      	ldrb	r3, [r3, #2]
 8000a5c:	3b04      	subs	r3, #4
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	b25a      	sxtb	r2, r3
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	78db      	ldrb	r3, [r3, #3]
 8000a66:	b25b      	sxtb	r3, r3
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	b25b      	sxtb	r3, r3
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	f003 030f 	and.w	r3, r3, #15
 8000a72:	73fb      	strb	r3, [r7, #15]
 8000a74:	e028      	b.n	8000ac8 <MCAL_GPIO_Init+0xd2>

	}

	else  //I sure The User Want Make The Pin As Input & in Case input Should Configure Mode(Speed)=00 & CNF(State)
	{
		if(Pin_Config->GPIO_MODE == GPIO_MODE_INPUT_FLO || GPIO_MODE_Analog)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	789b      	ldrb	r3, [r3, #2]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d107      	bne.n	8000a8e <MCAL_GPIO_Init+0x98>
		{
			ConfigurePin = (( ( (Pin_Config->GPIO_MODE) <<2) | 0x0) & 0x0F);      //Shift 2 to Set The CNF Bits
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	789b      	ldrb	r3, [r3, #2]
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	f003 030f 	and.w	r3, r3, #15
 8000a8a:	73fb      	strb	r3, [r7, #15]
 8000a8c:	e01c      	b.n	8000ac8 <MCAL_GPIO_Init+0xd2>
		}

		else if(Pin_Config->GPIO_MODE == GPIO_MODE_AF_INPUT)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	789b      	ldrb	r3, [r3, #2]
 8000a92:	2b08      	cmp	r3, #8
 8000a94:	d102      	bne.n	8000a9c <MCAL_GPIO_Init+0xa6>
		{
			ConfigurePin = (( ( (GPIO_MODE_INPUT_FLO) <<2) | 0x0) & 0x0f);      //Shift 2 to Set The CNF Bits
 8000a96:	2304      	movs	r3, #4
 8000a98:	73fb      	strb	r3, [r7, #15]
 8000a9a:	e015      	b.n	8000ac8 <MCAL_GPIO_Init+0xd2>
		}
		else  //PullUp Or PullDown
		{
			ConfigurePin = ( (((GPIO_MODE_INPUT_PU)<<2  ) |  0x0) & 0x0f);
 8000a9c:	2308      	movs	r3, #8
 8000a9e:	73fb      	strb	r3, [r7, #15]
			// 20. Port bit configuration table
			/*In Case GPIO_MODE_INPUT_PU OR GPIO_MODE_INPUT_PD We Put The Same Value 10 In CNF
			And Go To ODR IF GPIO_MODE_INPUT_PU Put 1 And If GPIO_MODE_INPUT_PD Put In ODR 0 Shifting By Bin Number*/
			if(Pin_Config->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	789b      	ldrb	r3, [r3, #2]
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d107      	bne.n	8000ab8 <MCAL_GPIO_Init+0xc2>
			{
				GPIOx->ODR |=(Pin_Config->GPIO_Pin_Number); //Not Making Shifting because The Pin Number Already Shifted in Header
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	683a      	ldr	r2, [r7, #0]
 8000aae:	8812      	ldrh	r2, [r2, #0]
 8000ab0:	431a      	orrs	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	e007      	b.n	8000ac8 <MCAL_GPIO_Init+0xd2>
			}
			else //GPIO_MODE_INPUT_PD
			{
				GPIOx->ODR &=~(Pin_Config->GPIO_Pin_Number);//Not Making Shifting because The Pin Number Already Shifted in Header
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	8812      	ldrh	r2, [r2, #0]
 8000ac0:	43d2      	mvns	r2, r2
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//Write On CRH Or CLH
	*(ConfigureRegister) |=( ConfigurePin << Get_CRLH_Postion(Pin_Config->GPIO_Pin_Number) );
 8000ac8:	7bfc      	ldrb	r4, [r7, #15]
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff ff2e 	bl	8000930 <Get_CRLH_Postion>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	fa04 f203 	lsl.w	r2, r4, r3
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	431a      	orrs	r2, r3
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	601a      	str	r2, [r3, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd90      	pop	{r4, r7, pc}

08000aec <MCAL_RCC_Get_SYS_CLKFreq>:
	1111: SYSCLK divided by 512*/
const uint8_t AHBPrescTable[16] = {0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8};


uint32_t MCAL_RCC_Get_SYS_CLKFreq(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
	00: HSI selected as system clock
	01: HSE selected as system clock
	10: PLL selected as system clock
	11: not allowed*/

	switch( (RCC->CFGR >>2) & 0b11 )
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MCAL_RCC_Get_SYS_CLKFreq+0x34>)
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	f003 0303 	and.w	r3, r3, #3
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d00a      	beq.n	8000b14 <MCAL_RCC_Get_SYS_CLKFreq+0x28>
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d302      	bcc.n	8000b08 <MCAL_RCC_Get_SYS_CLKFreq+0x1c>
 8000b02:	2b0a      	cmp	r3, #10
 8000b04:	d002      	beq.n	8000b0c <MCAL_RCC_Get_SYS_CLKFreq+0x20>
 8000b06:	e003      	b.n	8000b10 <MCAL_RCC_Get_SYS_CLKFreq+0x24>
	{

	case 00:
		return HSI_RC_CLK;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MCAL_RCC_Get_SYS_CLKFreq+0x38>)
 8000b0a:	e005      	b.n	8000b18 <MCAL_RCC_Get_SYS_CLKFreq+0x2c>
		//return HSE_CLK;
		break;

	case 10:
		//to do calc it HSE PLLCLK & PLLMULL & PLL source Mux
		return 16000000;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MCAL_RCC_Get_SYS_CLKFreq+0x3c>)
 8000b0e:	e003      	b.n	8000b18 <MCAL_RCC_Get_SYS_CLKFreq+0x2c>
		break;

	default:
		return 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	e001      	b.n	8000b18 <MCAL_RCC_Get_SYS_CLKFreq+0x2c>
		break;
 8000b14:	bf00      	nop
		break;

	}
	return 0;
 8000b16:	2300      	movs	r3, #0
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	40021000 	.word	0x40021000
 8000b24:	007a1200 	.word	0x007a1200
 8000b28:	00f42400 	.word	0x00f42400

08000b2c <MCAL_RCC_Get_HCLK_Freq>:


uint32_t MCAL_RCC_Get_HCLK_Freq(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	1011: SYSCLK divided by 16
	1100: SYSCLK divided by 64
	1101: SYSCLK divided by 128
	1110: SYSCLK divided by 256
	1111: SYSCLK divided by 512*/
	return MCAL_RCC_Get_SYS_CLKFreq() >> AHBPrescTable[( (RCC->CFGR >> 7) & 0b1111) ];/*(( RCC->CFGR >>8) & 0b1111) This Is
 8000b30:	f7ff ffdc 	bl	8000aec <MCAL_RCC_Get_SYS_CLKFreq>
 8000b34:	4601      	mov	r1, r0
 8000b36:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <MCAL_RCC_Get_HCLK_Freq+0x20>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	09db      	lsrs	r3, r3, #7
 8000b3c:	f003 030f 	and.w	r3, r3, #15
 8000b40:	4a03      	ldr	r2, [pc, #12]	; (8000b50 <MCAL_RCC_Get_HCLK_Freq+0x24>)
 8000b42:	5cd3      	ldrb	r3, [r2, r3]
 8000b44:	fa21 f303 	lsr.w	r3, r1, r3
	                                                      Read Value of AHB  prescaler To Determine index On 2d Upper Array */


}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	08000cb8 	.word	0x08000cb8

08000b54 <MCAL_RCC_Get_PCLK1_Freq>:



uint32_t MCAL_RCC_Get_PCLK1_Freq(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16*/

	return ( MCAL_RCC_Get_HCLK_Freq() >> APBPrescTable[ (( RCC->CFGR >>8) & 0b111) ] ); /*(( RCC->CFGR >>8) & 0b111) This Is
 8000b58:	f7ff ffe8 	bl	8000b2c <MCAL_RCC_Get_HCLK_Freq>
 8000b5c:	4601      	mov	r1, r0
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <MCAL_RCC_Get_PCLK1_Freq+0x20>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	0a1b      	lsrs	r3, r3, #8
 8000b64:	f003 0307 	and.w	r3, r3, #7
 8000b68:	4a03      	ldr	r2, [pc, #12]	; (8000b78 <MCAL_RCC_Get_PCLK1_Freq+0x24>)
 8000b6a:	5cd3      	ldrb	r3, [r2, r3]
 8000b6c:	fa21 f303 	lsr.w	r3, r1, r3
	                                                      Read Value of  PPRE1 prescaler To Determine index On Upper Array */

}
 8000b70:	4618      	mov	r0, r3
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40021000 	.word	0x40021000
 8000b78:	08000cb0 	.word	0x08000cb0

08000b7c <main>:




int main(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
	//Enable clock


	//Test case 1
	unsigned char ch1[] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 8000b82:	4a1b      	ldr	r2, [pc, #108]	; (8000bf0 <main+0x74>)
 8000b84:	f107 0308 	add.w	r3, r7, #8
 8000b88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b8c:	6018      	str	r0, [r3, #0]
 8000b8e:	3304      	adds	r3, #4
 8000b90:	8019      	strh	r1, [r3, #0]
 8000b92:	3302      	adds	r3, #2
 8000b94:	0c0a      	lsrs	r2, r1, #16
 8000b96:	701a      	strb	r2, [r3, #0]
	unsigned char ch2[7] = {0};
 8000b98:	463b      	mov	r3, r7
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	f8c3 2003 	str.w	r2, [r3, #3]

	EEPROM_Init();
 8000ba2:	f7ff fae5 	bl	8000170 <EEPROM_Init>
	EEPROM_Write_NBytes(0xAF, ch1, 7);
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	2207      	movs	r2, #7
 8000bac:	4619      	mov	r1, r3
 8000bae:	20af      	movs	r0, #175	; 0xaf
 8000bb0:	f7ff fafc 	bl	80001ac <EEPROM_Write_NBytes>
	EEPROM_Read_Byte(0xAF, ch2, 7);
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	2207      	movs	r2, #7
 8000bb8:	4619      	mov	r1, r3
 8000bba:	20af      	movs	r0, #175	; 0xaf
 8000bbc:	f7ff fb48 	bl	8000250 <EEPROM_Read_Byte>

	///Test Case
	ch1[0] = 0xA ;
 8000bc0:	230a      	movs	r3, #10
 8000bc2:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB ;
 8000bc4:	230b      	movs	r3, #11
 8000bc6:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC ;
 8000bc8:	230c      	movs	r3, #12
 8000bca:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD ;
 8000bcc:	230d      	movs	r3, #13
 8000bce:	72fb      	strb	r3, [r7, #11]
	EEPROM_Write_NBytes(0xFFF, ch1, 4);
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	2204      	movs	r2, #4
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000bdc:	f7ff fae6 	bl	80001ac <EEPROM_Write_NBytes>
	EEPROM_Read_Byte(0xFFF, ch2, 4);
 8000be0:	463b      	mov	r3, r7
 8000be2:	2204      	movs	r2, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000bea:	f7ff fb31 	bl	8000250 <EEPROM_Read_Byte>




	while(1)
 8000bee:	e7fe      	b.n	8000bee <main+0x72>
 8000bf0:	08000ca8 	.word	0x08000ca8

08000bf4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bf4:	480d      	ldr	r0, [pc, #52]	; (8000c2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bf6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bf8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfe:	490d      	ldr	r1, [pc, #52]	; (8000c34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c00:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <LoopForever+0xe>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c14:	4c0a      	ldr	r4, [pc, #40]	; (8000c40 <LoopForever+0x16>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c22:	f000 f811 	bl	8000c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c26:	f7ff ffa9 	bl	8000b7c <main>

08000c2a <LoopForever>:

LoopForever:
    b LoopForever
 8000c2a:	e7fe      	b.n	8000c2a <LoopForever>
  ldr   r0, =_estack
 8000c2c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c34:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000c38:	08000cd0 	.word	0x08000cd0
  ldr r2, =_sbss
 8000c3c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000c40:	2000005c 	.word	0x2000005c

08000c44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC1_2_IRQHandler>
	...

08000c48 <__libc_init_array>:
 8000c48:	b570      	push	{r4, r5, r6, lr}
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	4e0c      	ldr	r6, [pc, #48]	; (8000c80 <__libc_init_array+0x38>)
 8000c4e:	4c0d      	ldr	r4, [pc, #52]	; (8000c84 <__libc_init_array+0x3c>)
 8000c50:	1ba4      	subs	r4, r4, r6
 8000c52:	10a4      	asrs	r4, r4, #2
 8000c54:	42a5      	cmp	r5, r4
 8000c56:	d109      	bne.n	8000c6c <__libc_init_array+0x24>
 8000c58:	f000 f81a 	bl	8000c90 <_init>
 8000c5c:	2500      	movs	r5, #0
 8000c5e:	4e0a      	ldr	r6, [pc, #40]	; (8000c88 <__libc_init_array+0x40>)
 8000c60:	4c0a      	ldr	r4, [pc, #40]	; (8000c8c <__libc_init_array+0x44>)
 8000c62:	1ba4      	subs	r4, r4, r6
 8000c64:	10a4      	asrs	r4, r4, #2
 8000c66:	42a5      	cmp	r5, r4
 8000c68:	d105      	bne.n	8000c76 <__libc_init_array+0x2e>
 8000c6a:	bd70      	pop	{r4, r5, r6, pc}
 8000c6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c70:	4798      	blx	r3
 8000c72:	3501      	adds	r5, #1
 8000c74:	e7ee      	b.n	8000c54 <__libc_init_array+0xc>
 8000c76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c7a:	4798      	blx	r3
 8000c7c:	3501      	adds	r5, #1
 8000c7e:	e7f2      	b.n	8000c66 <__libc_init_array+0x1e>
 8000c80:	08000cc8 	.word	0x08000cc8
 8000c84:	08000cc8 	.word	0x08000cc8
 8000c88:	08000cc8 	.word	0x08000cc8
 8000c8c:	08000ccc 	.word	0x08000ccc

08000c90 <_init>:
 8000c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c92:	bf00      	nop
 8000c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c96:	bc08      	pop	{r3}
 8000c98:	469e      	mov	lr, r3
 8000c9a:	4770      	bx	lr

08000c9c <_fini>:
 8000c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9e:	bf00      	nop
 8000ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ca2:	bc08      	pop	{r3}
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	4770      	bx	lr
