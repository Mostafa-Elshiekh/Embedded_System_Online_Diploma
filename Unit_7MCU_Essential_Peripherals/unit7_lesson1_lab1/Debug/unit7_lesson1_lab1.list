
unit7_lesson1_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000025c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800031c  08000324  00010324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800031c  0800031c  00010324  2**0
                  CONTENTS
  4 .ARM          00000000  0800031c  0800031c  00010324  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800031c  08000324  00010324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800031c  0800031c  0001031c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000320  08000320  00010320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000324  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000324  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010324  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a4a  00000000  00000000  0001034c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001d9  00000000  00000000  00010d96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000000c8  00000000  00000000  00010f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000060  00000000  00000000  00011038  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000048  00000000  00000000  00011098  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000045b  00000000  00000000  000110e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000005c0  00000000  00000000  0001153b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00011afb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000b4  00000000  00000000  00011b78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000304 	.word	0x08000304

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000304 	.word	0x08000304

08000108 <clock_init>:
#define GPIOB_CRH *(( volatile uint32_t *)(GPIOB_base+0x04))
#define GPIOB_IDR *(( volatile uint32_t *)(GPIOB_base+0x08))
#define GPIOB_ODR *(( volatile uint32_t *)(GPIOB_base+0x0C))

void clock_init(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
	RCC_APB2ENR |=(1<<2); // enable clock for GPIOA
 800010c:	4b07      	ldr	r3, [pc, #28]	; (800012c <clock_init+0x24>)
 800010e:	681a      	ldr	r2, [r3, #0]
 8000110:	4b06      	ldr	r3, [pc, #24]	; (800012c <clock_init+0x24>)
 8000112:	2104      	movs	r1, #4
 8000114:	430a      	orrs	r2, r1
 8000116:	601a      	str	r2, [r3, #0]
	RCC_APB2ENR |=(1<<3); // enable clock for GPIOB
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <clock_init+0x24>)
 800011a:	681a      	ldr	r2, [r3, #0]
 800011c:	4b03      	ldr	r3, [pc, #12]	; (800012c <clock_init+0x24>)
 800011e:	2108      	movs	r1, #8
 8000120:	430a      	orrs	r2, r1
 8000122:	601a      	str	r2, [r3, #0]
}
 8000124:	46c0      	nop			; (mov r8, r8)
 8000126:	46bd      	mov	sp, r7
 8000128:	bd80      	pop	{r7, pc}
 800012a:	46c0      	nop			; (mov r8, r8)
 800012c:	40021018 	.word	0x40021018

08000130 <GPIO_init>:
void GPIO_init(void)
{   GPIOA_ODR=0;
 8000130:	b580      	push	{r7, lr}
 8000132:	af00      	add	r7, sp, #0
 8000134:	4b1b      	ldr	r3, [pc, #108]	; (80001a4 <GPIO_init+0x74>)
 8000136:	2200      	movs	r2, #0
 8000138:	601a      	str	r2, [r3, #0]
GPIOA_CRL &=0xffffff0f;  // clear bits of PA1
 800013a:	4b1b      	ldr	r3, [pc, #108]	; (80001a8 <GPIO_init+0x78>)
 800013c:	681a      	ldr	r2, [r3, #0]
 800013e:	4b1a      	ldr	r3, [pc, #104]	; (80001a8 <GPIO_init+0x78>)
 8000140:	21f0      	movs	r1, #240	; 0xf0
 8000142:	438a      	bics	r2, r1
 8000144:	601a      	str	r2, [r3, #0]
GPIOA_CRL |=(1<<6);  // PA1 in input floating
 8000146:	4b18      	ldr	r3, [pc, #96]	; (80001a8 <GPIO_init+0x78>)
 8000148:	681a      	ldr	r2, [r3, #0]
 800014a:	4b17      	ldr	r3, [pc, #92]	; (80001a8 <GPIO_init+0x78>)
 800014c:	2140      	movs	r1, #64	; 0x40
 800014e:	430a      	orrs	r2, r1
 8000150:	601a      	str	r2, [r3, #0]
GPIOA_CRH &=0xff0fffff; // clear bits of PA13
 8000152:	4b16      	ldr	r3, [pc, #88]	; (80001ac <GPIO_init+0x7c>)
 8000154:	681a      	ldr	r2, [r3, #0]
 8000156:	4b15      	ldr	r3, [pc, #84]	; (80001ac <GPIO_init+0x7c>)
 8000158:	4915      	ldr	r1, [pc, #84]	; (80001b0 <GPIO_init+0x80>)
 800015a:	400a      	ands	r2, r1
 800015c:	601a      	str	r2, [r3, #0]
GPIOA_CRH |=(1<<22); // PA13 in input flaoting
 800015e:	4b13      	ldr	r3, [pc, #76]	; (80001ac <GPIO_init+0x7c>)
 8000160:	681a      	ldr	r2, [r3, #0]
 8000162:	4b12      	ldr	r3, [pc, #72]	; (80001ac <GPIO_init+0x7c>)
 8000164:	2180      	movs	r1, #128	; 0x80
 8000166:	03c9      	lsls	r1, r1, #15
 8000168:	430a      	orrs	r2, r1
 800016a:	601a      	str	r2, [r3, #0]

GPIOB_CRL &=0xffffff0f;  // clear bits of PB1
 800016c:	4b11      	ldr	r3, [pc, #68]	; (80001b4 <GPIO_init+0x84>)
 800016e:	681a      	ldr	r2, [r3, #0]
 8000170:	4b10      	ldr	r3, [pc, #64]	; (80001b4 <GPIO_init+0x84>)
 8000172:	21f0      	movs	r1, #240	; 0xf0
 8000174:	438a      	bics	r2, r1
 8000176:	601a      	str	r2, [r3, #0]
GPIOB_CRL |=(1<<4);  // PB1 output pull-push and 10MHZ max Speed
 8000178:	4b0e      	ldr	r3, [pc, #56]	; (80001b4 <GPIO_init+0x84>)
 800017a:	681a      	ldr	r2, [r3, #0]
 800017c:	4b0d      	ldr	r3, [pc, #52]	; (80001b4 <GPIO_init+0x84>)
 800017e:	2110      	movs	r1, #16
 8000180:	430a      	orrs	r2, r1
 8000182:	601a      	str	r2, [r3, #0]
GPIOB_CRH &=0xff0fffff; // clear bits of PB13
 8000184:	4b0c      	ldr	r3, [pc, #48]	; (80001b8 <GPIO_init+0x88>)
 8000186:	681a      	ldr	r2, [r3, #0]
 8000188:	4b0b      	ldr	r3, [pc, #44]	; (80001b8 <GPIO_init+0x88>)
 800018a:	4909      	ldr	r1, [pc, #36]	; (80001b0 <GPIO_init+0x80>)
 800018c:	400a      	ands	r2, r1
 800018e:	601a      	str	r2, [r3, #0]
GPIOB_CRH |=(1<<20); // PB13 output pull-push  10MHZ max Speed
 8000190:	4b09      	ldr	r3, [pc, #36]	; (80001b8 <GPIO_init+0x88>)
 8000192:	681a      	ldr	r2, [r3, #0]
 8000194:	4b08      	ldr	r3, [pc, #32]	; (80001b8 <GPIO_init+0x88>)
 8000196:	2180      	movs	r1, #128	; 0x80
 8000198:	0349      	lsls	r1, r1, #13
 800019a:	430a      	orrs	r2, r1
 800019c:	601a      	str	r2, [r3, #0]


}
 800019e:	46c0      	nop			; (mov r8, r8)
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	4001080c 	.word	0x4001080c
 80001a8:	40010800 	.word	0x40010800
 80001ac:	40010804 	.word	0x40010804
 80001b0:	ff0fffff 	.word	0xff0fffff
 80001b4:	40010c00 	.word	0x40010c00
 80001b8:	40010c04 	.word	0x40010c04

080001bc <my_wait>:
void my_wait(uint32_t x)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b084      	sub	sp, #16
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
	uint32_t y,z;
	for(y=0;y<x;y++)
 80001c4:	2300      	movs	r3, #0
 80001c6:	60fb      	str	r3, [r7, #12]
 80001c8:	e00b      	b.n	80001e2 <my_wait+0x26>
		for(z=0;z<255;z++);
 80001ca:	2300      	movs	r3, #0
 80001cc:	60bb      	str	r3, [r7, #8]
 80001ce:	e002      	b.n	80001d6 <my_wait+0x1a>
 80001d0:	68bb      	ldr	r3, [r7, #8]
 80001d2:	3301      	adds	r3, #1
 80001d4:	60bb      	str	r3, [r7, #8]
 80001d6:	68bb      	ldr	r3, [r7, #8]
 80001d8:	2bfe      	cmp	r3, #254	; 0xfe
 80001da:	d9f9      	bls.n	80001d0 <my_wait+0x14>
	for(y=0;y<x;y++)
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	3301      	adds	r3, #1
 80001e0:	60fb      	str	r3, [r7, #12]
 80001e2:	68fa      	ldr	r2, [r7, #12]
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	429a      	cmp	r2, r3
 80001e8:	d3ef      	bcc.n	80001ca <my_wait+0xe>

}
 80001ea:	46c0      	nop			; (mov r8, r8)
 80001ec:	46bd      	mov	sp, r7
 80001ee:	b004      	add	sp, #16
 80001f0:	bd80      	pop	{r7, pc}
	...

080001f4 <main>:
int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
	clock_init();
 80001fa:	f7ff ff85 	bl	8000108 <clock_init>
	GPIO_init();
 80001fe:	f7ff ff97 	bl	8000130 <GPIO_init>
	unsigned int flag=0;
 8000202:	2300      	movs	r3, #0
 8000204:	607b      	str	r3, [r7, #4]
	while(1)
	{
		//PA1 >>> is connected to PUR
		if(((GPIOA_IDR & (1<<1)) >>1 ) == 0 && flag==1) // button pressed
 8000206:	4b16      	ldr	r3, [pc, #88]	; (8000260 <main+0x6c>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	2202      	movs	r2, #2
 800020c:	4013      	ands	r3, r2
 800020e:	d10a      	bne.n	8000226 <main+0x32>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2b01      	cmp	r3, #1
 8000214:	d107      	bne.n	8000226 <main+0x32>
		{
			GPIOB_ODR ^=(1<<1); // toggle led on PB1
 8000216:	4b13      	ldr	r3, [pc, #76]	; (8000264 <main+0x70>)
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	4b12      	ldr	r3, [pc, #72]	; (8000264 <main+0x70>)
 800021c:	2102      	movs	r1, #2
 800021e:	404a      	eors	r2, r1
 8000220:	601a      	str	r2, [r3, #0]
			flag=0;
 8000222:	2300      	movs	r3, #0
 8000224:	607b      	str	r3, [r7, #4]

		}
		if(((GPIOA_IDR & (1<<1)) >>1 ) == 1)
 8000226:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <main+0x6c>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	085b      	lsrs	r3, r3, #1
 800022c:	2201      	movs	r2, #1
 800022e:	4013      	ands	r3, r2
 8000230:	2b01      	cmp	r3, #1
 8000232:	d101      	bne.n	8000238 <main+0x44>
		{
			flag=1;
 8000234:	2301      	movs	r3, #1
 8000236:	607b      	str	r3, [r7, #4]
		}


			//PA13 >>> is connected to PDR
			if(((GPIOA_IDR & (1<<13)) >>13 ) ==1 ) // button pressed
 8000238:	4b09      	ldr	r3, [pc, #36]	; (8000260 <main+0x6c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	0b5b      	lsrs	r3, r3, #13
 800023e:	2201      	movs	r2, #1
 8000240:	4013      	ands	r3, r2
 8000242:	2b01      	cmp	r3, #1
 8000244:	d106      	bne.n	8000254 <main+0x60>
			{
				GPIOB_ODR ^=(1<<13); // toggle led on PB13 multipressing
 8000246:	4b07      	ldr	r3, [pc, #28]	; (8000264 <main+0x70>)
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	4b06      	ldr	r3, [pc, #24]	; (8000264 <main+0x70>)
 800024c:	2180      	movs	r1, #128	; 0x80
 800024e:	0189      	lsls	r1, r1, #6
 8000250:	404a      	eors	r2, r1
 8000252:	601a      	str	r2, [r3, #0]

			}
		my_wait(300);
 8000254:	2396      	movs	r3, #150	; 0x96
 8000256:	005b      	lsls	r3, r3, #1
 8000258:	0018      	movs	r0, r3
 800025a:	f7ff ffaf 	bl	80001bc <my_wait>
		if(((GPIOA_IDR & (1<<1)) >>1 ) == 0 && flag==1) // button pressed
 800025e:	e7d2      	b.n	8000206 <main+0x12>
 8000260:	40010808 	.word	0x40010808
 8000264:	40010c0c 	.word	0x40010c0c

08000268 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000268:	480d      	ldr	r0, [pc, #52]	; (80002a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800026a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800026c:	e000      	b.n	8000270 <Reset_Handler+0x8>
 800026e:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000272:	490d      	ldr	r1, [pc, #52]	; (80002a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000274:	4a0d      	ldr	r2, [pc, #52]	; (80002ac <LoopForever+0xe>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000278:	e002      	b.n	8000280 <LoopCopyDataInit>

0800027a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800027a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800027c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027e:	3304      	adds	r3, #4

08000280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000284:	d3f9      	bcc.n	800027a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000286:	4a0a      	ldr	r2, [pc, #40]	; (80002b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000288:	4c0a      	ldr	r4, [pc, #40]	; (80002b4 <LoopForever+0x16>)
  movs r3, #0
 800028a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800028c:	e001      	b.n	8000292 <LoopFillZerobss>

0800028e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000290:	3204      	adds	r2, #4

08000292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000294:	d3fb      	bcc.n	800028e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000296:	f000 f811 	bl	80002bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800029a:	f7ff ffab 	bl	80001f4 <main>

0800029e <LoopForever>:

LoopForever:
    b LoopForever
 800029e:	e7fe      	b.n	800029e <LoopForever>
  ldr   r0, =_estack
 80002a0:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80002a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002ac:	08000324 	.word	0x08000324
  ldr r2, =_sbss
 80002b0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002b4:	2000001c 	.word	0x2000001c

080002b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b8:	e7fe      	b.n	80002b8 <ADC_IRQHandler>
	...

080002bc <__libc_init_array>:
 80002bc:	b570      	push	{r4, r5, r6, lr}
 80002be:	2600      	movs	r6, #0
 80002c0:	4d0c      	ldr	r5, [pc, #48]	; (80002f4 <__libc_init_array+0x38>)
 80002c2:	4c0d      	ldr	r4, [pc, #52]	; (80002f8 <__libc_init_array+0x3c>)
 80002c4:	1b64      	subs	r4, r4, r5
 80002c6:	10a4      	asrs	r4, r4, #2
 80002c8:	42a6      	cmp	r6, r4
 80002ca:	d109      	bne.n	80002e0 <__libc_init_array+0x24>
 80002cc:	2600      	movs	r6, #0
 80002ce:	f000 f819 	bl	8000304 <_init>
 80002d2:	4d0a      	ldr	r5, [pc, #40]	; (80002fc <__libc_init_array+0x40>)
 80002d4:	4c0a      	ldr	r4, [pc, #40]	; (8000300 <__libc_init_array+0x44>)
 80002d6:	1b64      	subs	r4, r4, r5
 80002d8:	10a4      	asrs	r4, r4, #2
 80002da:	42a6      	cmp	r6, r4
 80002dc:	d105      	bne.n	80002ea <__libc_init_array+0x2e>
 80002de:	bd70      	pop	{r4, r5, r6, pc}
 80002e0:	00b3      	lsls	r3, r6, #2
 80002e2:	58eb      	ldr	r3, [r5, r3]
 80002e4:	4798      	blx	r3
 80002e6:	3601      	adds	r6, #1
 80002e8:	e7ee      	b.n	80002c8 <__libc_init_array+0xc>
 80002ea:	00b3      	lsls	r3, r6, #2
 80002ec:	58eb      	ldr	r3, [r5, r3]
 80002ee:	4798      	blx	r3
 80002f0:	3601      	adds	r6, #1
 80002f2:	e7f2      	b.n	80002da <__libc_init_array+0x1e>
 80002f4:	0800031c 	.word	0x0800031c
 80002f8:	0800031c 	.word	0x0800031c
 80002fc:	0800031c 	.word	0x0800031c
 8000300:	08000320 	.word	0x08000320

08000304 <_init>:
 8000304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030a:	bc08      	pop	{r3}
 800030c:	469e      	mov	lr, r3
 800030e:	4770      	bx	lr

08000310 <_fini>:
 8000310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000316:	bc08      	pop	{r3}
 8000318:	469e      	mov	lr, r3
 800031a:	4770      	bx	lr
